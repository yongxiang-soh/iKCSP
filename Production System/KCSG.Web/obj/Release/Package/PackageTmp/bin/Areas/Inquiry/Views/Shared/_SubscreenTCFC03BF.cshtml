@using KCSG.Core.Constants
@using KCSG.Core.Controls
@using KCSG.Core.CustomControls
@using KCSG.Core.Helper
@model KCSG.Web.Areas.Inquiry.ViewModels.InquiryByWarehouseLocation.InquiryByProductShelfStatusEmptyModelView

@using (Ajax.BeginForm("UpdateSubscreentcf03Bf", "InquiryBase", new AjaxOptions() { HttpMethod = "POST", Confirm = "Ready to update ?", OnSuccess = "InquiryBase.onUpdateSubscreentcf03BfSuccess" }, new { @id = "updateSubscreentcf03Bf" }))
{
    @Html.HiddenFor(m => m.SearchCondition)
    @Html.HiddenFor(m => m.Row)
    @Html.HiddenFor(m => m.Bay)
    @Html.HiddenFor(m => m.Level)
    @Html.HiddenFor(m=>m.MaxLoad)
    <div class="panel panel-danger">
        <div class="panel-heading">Inquiry by product Shelf Status Picture (Empty Pallet) - TCFC03BF</div>
        <div class="panel-body">
            <div class="row">
                <div class="col-lg-2 col-lg-offset-2">
                    @Html.ExtLabelFor(model => model.ShelfNo)
                </div>
                <div class="col-lg-6 form-group">
                    @Html.ExtTextBoxFor(model => model.ShelfNo, new { @class = "form-control", @readonly = "readonly" })
                </div>
            </div>
            <div class="row">
                <div class="col-lg-2 col-lg-offset-2">
                    @Html.ExtLabelFor(model => model.ShelfStatus)
                </div>
                <div class="col-lg-6 form-group">
                    @Html.ExtTextBoxFor(model => model.ShelfStatus, new { @class = "form-control", @disabled = "disabled" })
                </div>
            </div>
            <div class="row">
                <div class="col-lg-2 col-lg-offset-2">
                    @Html.ExtLabelRequireFor(model => model.PalletLoadAmout,Model.ShowUpdate)
                </div>
                <div class="col-lg-6 form-group">
                    @if (Model.ShowUpdate)
                    {
                        @Html.ExtTextBoxFor(model => model.PalletLoadAmout, new { type = "number", max = 99 })
                    }
                    else
                    {
                        @Html.ExtTextBoxFor(model => model.PalletLoadAmout, new { @disabled = "disabled" })
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="modal-footer">
        @if (Model.ShowUpdate)
        {
            <button type="submit" class="btn btn-default btn-flat btn-less-5-chars" id="btnOk">OK</button>
        }
        
        <button class="btn btn-default btn-flat btn-less-5-chars" type="button" data-dismiss="modal">Cancel</button>
    </div>
}
<script>
    $().ready(function () {
        $.validator.unobtrusive.parse("#updateSubscreentcf03Bf");
        $.validator.addMethod("maxLoad",
            function (value, element,para) {

                var thiserror = "";
                if (parseInt(value) > parseInt($(para).val())) {
                    thiserror = "Value is out of range !";
                    return false;
                }
                return true;
            },
            "Value is out of range !");
        $("#PalletLoadAmout").rules("add", { maxLoad: '#MaxLoad' });
    });
</script>