@using KCSG.Core.Constants
@using KCSG.Core.Controls
@using KCSG.Core.CustomControls
@model KCSG.Web.Areas.Inquiry.ViewModels.InquiryByWarehouseLocation.InquiryByPreProductShelfStatusEmptyModelView


@using (Ajax.BeginForm("UpdateSubscreentcf03Af", "InquiryBase", new AjaxOptions() { HttpMethod = "POST", Confirm = "Ready to update ?", OnSuccess = "InquiryBase.onUpdateSubscreentcf03AfSuccess" }, new { @id = "updateSubscreentcf03Af" }))
{
    @Html.HiddenFor(m => m.SearchCondition)
    @Html.HiddenFor(m => m.Row)
    @Html.HiddenFor(m => m.Bay)
    @Html.HiddenFor(m => m.Level)
    <div class="panel panel-danger">
        <div class="panel-heading">Query by Pre-product Shelf Status Picture [Empty Container] - TCFC03AF</div>
        <div class="panel-body">
            <div class="row">
                <div class="col-lg-2">
                    @Html.ExtLabelFor(model => model.ShelfNo)
                </div>
                <div class="col-lg-4 form-group">
                    @Html.ExtTextBoxFor(model => model.ShelfNo, new { @class = "form-control", @readonly = "readonly" })
                </div>
                <div class="col-lg-2">
                    @Html.ExtLabelFor(model => model.ShelfStatus)
                </div>
                <div class="col-lg-4 form-group">
                    @Html.ExtTextBoxFor(model => model.ShelfStatus, new { @class = "form-control", @disabled = "disabled" })
                </div>
            </div>
            <div class="row">
                <div class="col-lg-2">
                    @Html.ExtLabelRequireFor(model => model.ContainerType,Model.ShowUpdate)
                </div>
                <div class="col-lg-4 form-group">
                    @if (Model.ShowUpdate)
                    {
                        @Html.ExtTextBoxAddOnFor(model => model.ContainerType, CustomControlConstants.AddOn.Search, "#modalContainerTypeSelect", new { style = "width:100%", @id = "txtContainerType" })
                    }
                    else
                    {
                        @Html.ExtTextBoxAddOnFor(model => model.ContainerType, CustomControlConstants.AddOn.Search, null, new { style = "width:100%", @id = "txtContainerType" })
                    }
                </div>
                <div class="col-lg-2">
                    @Html.ExtLabelRequireFor(model => model.ContainerNo, Model.ShowUpdate)
                </div>
                <div class="col-lg-4 form-group">
                    @if (Model.ShowUpdate)
                    {
                        @Html.ExtTextBoxFor(model => model.ContainerNo, new { type = "number", max = 999,min = 1 })
                    }
                    else
                    {
                        @Html.ExtTextBoxNumberFor(model => model.ContainerNo, new { @class = "form-control", @readonly = "readonly" });
                    }
                </div>
            </div>
            <div class="row">
                <div class="col-lg-2">
                    @Html.ExtLabelRequireFor(model => model.ContainerName, Model.ShowUpdate)
                </div>
                <div class="col-lg-10 form-group">
                    @Html.ExtTextBoxFor(model => model.ContainerName, new { @class = "form-control", @readonly = "readonly", @id = "txtContainerName" })
                </div>
            </div>
            
        </div>
    </div>
    <div class="modal-footer">
        @if (Model.ShowUpdate)
        {
            <button type="submit" class="btn btn-default btn-flat btn-less-5-chars" id="btnOk">OK</button>
        }
        <button class="btn btn-default btn-flat btn-less-5-chars" type="button" data-dismiss="modal">Cancel</button>
    </div>
}

<script>
    $().ready(function () {
        $.validator.unobtrusive.parse("#updateSubscreentcf03Af");
        function isEmpty(str) {
            return (!str || 0 === str.length);
        }
        $.validator.addMethod("morethanone",
            function (value, element) {

                var thiserror = "";
                if (!isEmpty(value)) {
                    if (parseInt(value) < 1) {
                        thiserror = "Container No must be more than one !";
                        return false;
                    }
                }
                return true;
            },
            "Container No must be more than one !");
        $("#ContainerNo").rules("add", { morethanone: true });
    });
</script>
