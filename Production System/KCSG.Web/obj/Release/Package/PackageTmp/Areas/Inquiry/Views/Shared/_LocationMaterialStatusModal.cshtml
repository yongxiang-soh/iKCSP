@using KCSG.Core.Constants
@using KCSG.Core.CustomControls
@model KCSG.Web.Areas.Inquiry.ViewModels.InquiryByWarehouseLocation.InquiryByLocaltionMaterialStatusModelView
<script>

    var message = {
        TCSS000041: ' @KCSG.Core.Constants.Constants.Messages.SystemManagement_TCSS000041',
        TCFC021F03: ' @KCSG.Core.Constants.Constants.Messages.SystemManagement_TCFC021F03',
        TCFC021F04: ' @KCSG.Core.Constants.Constants.Messages.SystemManagement_TCFC021F04'
    }

    var searchCondition = '@((int)Model.SearchCondition)';
    var material = '@((int)Constants.InquirySearchConditionWarehouseLocation.Material)';
    var product = '@((int)Constants.InquirySearchConditionWarehouseLocation.Product)';
    var preproduct = '@((int)Constants.InquirySearchConditionWarehouseLocation.PreProduct)';
    var searchShelfType = '@((int)Model.ProductShelfType)';
    var shelfTypeNml = '@((int)Constants.F51_ShelfType.Normal)'; //0
    var shelfTypeBadUse = '@((int)Constants.F51_ShelfType.BadUse)';//1
    function onUpdateLocationMaterialConfirm() {
        var x;
        if (searchCondition == material) {
            if ($('#updateLocationMaterial #Status').val() == "0") {
                x = confirm(message.TCFC021F03);
            } else if ($('#updateLocationMaterial #Status').val() == "1"){
                x = confirm(message.TCFC021F04);
            }
        }
        if (searchCondition == preproduct) {
            if ($('#updateLocationMaterial #Status').val() == "0") {
                x = confirm(message.TCFC021F03);
            }
        }

        if (searchCondition == product) {
            if ($('#updateLocationMaterial #Status').val() == "0")
            {
                if (searchShelfType == shelfTypeNml)
                    x = confirm(message.TCFC021F03);
            }

        }
        if (x === undefined || x) {
            return true;
        }
        else
            return false;
    }
</script>
@{
    var titlePopup = string.Empty;
    if (Model.SearchCondition == Constants.InquirySearchConditionWarehouseLocation.Material)
    {
        titlePopup = "Location (Material) Status - TCFC022F";
    }
    if (Model.SearchCondition == Constants.InquirySearchConditionWarehouseLocation.PreProduct)
    {
        titlePopup = "Pre-product Status - TCFC022F";
    }
    if (Model.SearchCondition == Constants.InquirySearchConditionWarehouseLocation.Product)
    {
        titlePopup = "Product Status - TCFC022F";
    }
}
@using (Ajax.BeginForm("UpdateLocationMaterial", "InquiryBase", new AjaxOptions() { HttpMethod = "POST", OnSuccess = "InquiryBase.onUpdateLocationMaterialSuccess" }, new { @id = "updateLocationMaterial" }))
{
    @Html.HiddenFor(m=>m.SearchCondition)
    @Html.HiddenFor(m=>m.ShelfRow)
    @Html.HiddenFor(m => m.ShelfBay)
    @Html.HiddenFor(m => m.ShelfLevel)
    <div class="panel panel-danger">
        <div class="panel-heading">@titlePopup</div>
        <div class="panel-body">
            <div class="row">
                <div class="col-lg-12">
                    <div class="col-lg-3 col-lg-offset-2">
                        @Html.ExtLabelFor(model => model.ShelfNo)
                    </div>
                    <div class="col-lg-5 form-group">
                        @Html.ExtTextBoxFor(model => model.ShelfNo, new {@disabled = "disabled"})
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-12">
                    <div class="col-lg-3 col-lg-offset-2">
                        @Html.ExtLabelFor(model => model.OldStatus)
                    </div>
                    <div class="col-lg-5 form-group">
                        @Html.ExtTextBoxFor(model => model.OldStatus, new {@disabled = "disabled"})
                    </div>
                </div>
            </div>
            @if (!Model.StatusIsHidden)
            {
                <div class="row">
                    <div class="col-lg-12">
                        <div class="col-lg-3 col-lg-offset-2">
                            @Html.ExtLabelFor(model => model.Status)
                        </div>
                        <div class="col-lg-5 form-group">
                            @Html.ExtDropDownListFor(model => model.Status, Model.ListStatus, null, null)
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
    <div class="modal-footer">
        @if (!Model.StatusIsHidden)
        {
            <button type="submit" class="btn btn-default btn-flat btn-less-5-chars" onclick="return onUpdateLocationMaterialConfirm() " id="btnOk">OK</button>
        }
        <button class="btn btn-default btn-flat btn-less-5-chars" type="button" data-dismiss="modal">Cancel</button>
    </div>
}

