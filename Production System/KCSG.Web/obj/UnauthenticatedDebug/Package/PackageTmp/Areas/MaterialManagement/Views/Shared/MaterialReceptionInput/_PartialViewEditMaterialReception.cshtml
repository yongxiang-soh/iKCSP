@using KCSG.Core.Constants
@using KCSG.Core.CustomControls
@using KCSG.Core.Helper
@using KCSG.Core.Controls
@model KCSG.Web.Areas.MaterialManagement.ViewModels.MaterialReceptionInput.MaterialReceptionViewModel
@using (Ajax.BeginForm("Edit", "MatertialReceptionInput", new AjaxOptions() {HttpMethod = "POST", OnSuccess = "onSuccess"}, new {@id = "addNewForm"}))
{
    @Html.HiddenFor(model => model.IsCreate)
    @Html.HiddenFor(model => model.F30_AddDate)
    @Html.HiddenFor(model => model.F30_UpdateCount)
    <div class="panel panel-danger">
        <div class="panel-heading">
            @if (Model.IsCreate)
            {
                <span>Create Material Reception record-TCRM012F</span>
            }
            else
            {
                <span>Update Material Reception record-TCRM012F</span>
            }
        </div>
        <div class="panel-body">
            <div class="row form-group">
                <div class="col-xs-6">
                    <div class="col-xs-4">
                        @Html.ExtLabelFor(model => model.F30_PrcOrdNo)
                    </div>
                    <div class="col-xs-8">
                        @if (Model.IsCreate)
                        {
                            @Html.ExtTextBoxFor(model => model.F30_PrcOrdNo)
                        }
                        else
                        {
                            @Html.ExtTextBoxFor(model => model.F30_PrcOrdNo, new {style = "cursor: not-allowed", @readonly = "readonly", @id = "disabledInput", @class = "form-control"})
                        }
                    </div>
                </div>
                <div class="col-xs-6">
                    <div class="col-xs-4">
                        @Html.ExtLabelFor(model => model.F30_PrtDvrNo)
                    </div>
                    <div class="col-xs-8">
                        @if (Model.IsCreate)
                        {
                            @Html.ExtTextBoxFor(model => model.F30_PrtDvrNo)
                        }
                        else
                        {
                            @Html.ExtTextBoxFor(model => model.F30_PrtDvrNo, new {style = "cursor: not-allowed", @readonly = "readonly", @id = "disabledInput", @class = "form-control"})
                        }
                    </div>
                </div>
            </div>

            <div class="row form-group">
                <div class="col-xs-6">
                    <div class="col-xs-4">
                        @Html.ExtLabelFor(model => model.F30_MaterialCode)
                    </div>
                    <div class="col-xs-8">

                        @if (Model.IsCreate)
                        {
                            @Html.ExtTextBoxAddOnFor(model => model.F30_MaterialCode, CustomControlConstants.AddOn.Search, "#modalMaterialCodeSelect", new {@id = "txtMaterialCode", style = "width:100%"})
                        }
                        else
                        {
                            @Html.ExtTextBoxAddOnFor(model => model.F30_MaterialCode, CustomControlConstants.AddOn.Search, "", new {@id = "txtMaterialCode", style = "width:100%"})
                        }
                    </div>

                </div>
                <div class="col-xs-6">
                    <div class="col-xs-4">
                        @Html.ExtLabelFor(model => model.F30_ExpectAmount)
                    </div>
                    <div class="col-xs-8">
                        @Html.ExtNumberFor(model => model.F30_ExpectAmount)
                        <span class="field-validation-error"><span id="errorlist" hidden></span></span>
                    </div>
                </div>
            </div>

            <div class="row form-group">
                <div class="col-xs-6">
                    <div class="col-xs-4">
                        @Html.LabelFor(model => model.Name)
                    </div>
                    <div class="col-xs-8">
                        @Html.ExtTextBoxFor(model => model.Name, new { @id = "txtMaterialName", @readonly = "readonly"})
                    </div>
                </div>
                <div class="col-xs-6">
                    <div class="col-xs-4">
                        @Html.ExtLabelFor(model => model.F30_ExpectDate)
                    </div>
                    <div class="col-xs-8">
                        @if (Model.IsCreate)
                        {
                            @Html.ExtDateTimeFor(model => model.F30_ExpectDate, new DateTimeOption() { Format = "DD/MM/YYYY" })
                        }
                        else
                        {
                            @Html.ExtDateTimeFor(model => model.F30_ExpectDate, new DateTimeOption() { Format = "DD/MM/YYYY" }, new { style = " cursor: not-allowed", @class = "form-control" })
                        }
                    </div>
                </div>
            </div>

            <div class="row form-group">
                <div class="col-xs-6">
                    <div class="col-xs-4">
                        @Html.ExtLabelFor(model => model.AcceptClass)
                    </div>
                    <div class="col-xs-8">
                        @*@{
                        var lstStatus = EnumsHelper.GetListItemsWithDescription<Constants.TX30_Reception>(Constants.TX30_Reception.Pending);
                        //lstStatus.OrderByDescending(x => x.Value);
                        lstStatus.RemoveAt(1);
                        lstStatus.RemoveAt(2);
                        }
                        @if (Model.IsCreate)
                        {
                            @Html.ExtRadioButtonFor(model => model.F30_AcceptClass, lstStatus, new { @disabled = "disabled" }, true, 6)
                        }
                        else
                        {
                            @Html.ExtRadioButtonFor(model => model.F30_AcceptClass, lstStatus, new { }, true, 6)
                        }*@

                        @Html.ExtTextBoxFor(model => model.AcceptClass, new {@readonly = "readonly"})
                        @Html.HiddenFor(model => model.F30_AcceptClass)
                    </div>
                </div>
                <div class="col-xs-6">
                    <div class="col-xs-4">
                        @Html.ExtLabelFor(model => model.F30_StoragedAmount)
                    </div>
                    <div class="col-xs-8">
                        @Html.ExtTextBoxFor(model => model.F30_StoragedAmount, new {@readonly = "readonly"})
                    </div>
                </div>
            </div>
            <div class="row form-group" style="padding-left: 25px;  ">
                <button type="button" class="btn btn-flat btn-default btn-less-5-chars" onclick="ok()">OK</button>
                <button type="button" class="btn btn-flat btn-default btn-less-5-chars" onclick=" hideForm() ">Exit</button>
            </div>
        </div>
    </div>
}

@*<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog custom-model-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel">Modal title</h4>
            </div>
            <div class="modal-body">
                ...
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default btn-flat " data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-default btn-flat">Save changes</button>
            </div>
        </div>
    </div>
</div>*@

<script>
    $(document).ready(function() {
        $.validator.unobtrusive.parse('#addNewForm');
        var $inputs = $('#addNewForm :input');
        $inputs.change(function() {
            //alert(this.value.length);
        });

        $('#F30_ExpectAmount').keyup(function () {
            var hasValue = this.value.length > 0;
            $("#errorlist").text("").hide();
        });
    });

    function ok() {
        var txtExpectAmount = $("#F30_ExpectAmount").val().split(',');
        var result = "";
        for (var i = 0; i < txtExpectAmount.length; i++) {
            result +=
                txtExpectAmount[i];
        }
        var expectAmount = parseFloat(result);
        var storagedAmount = parseFloat($("#F30_StoragedAmount").val());
        if (expectAmount < storagedAmount) {
            $("#errorlist").text("Delivery quantity must be more than the delivered quantity!").show();
            return;
        }
        $("#errorlist").text("").hide();
        $("#addNewForm").submit();
    }

</script>